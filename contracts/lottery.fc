#include "imports/stdlib.fc";


;; ===== STORAGE =====
global slice storage::admin_address; ;; 267
global int storage::public_key; ;; 256

global int storage::commission_game_admin; ;; 16
global int storage::commission_game_runners; ;; 16
global int storage::min_bet; ;; 124
global int storage::max_bet; ;; 124
global int storage::max_participates; ;; 8
global int storage::participates_number; ;; 8 
global int storage::game_time; ;; 32
global int storage::game_start_time; ;; 32
global int storage::game_round; ;; 32
global int storage::stop_game_on_round; ;; 32 
global int storage::jackpot; ;; 124
global slice storage::last_game_winner_address; ;; 267
global cell storage::list_participates; ;; ref
global cell storage::last_game_list_participates; ;; ref 

;; ===== CONST ===== 
const int commission_divider = 10000;
const int storage_commission = 50000000;

;; ===== ERRORS =====
const int error::not_admin = 500;
const int error::invalid_signature = 501;
const int error::wrong_round = 502;
const int error::game_is_not_over_yet = 503;

;; ===== OP-CODES =====
const int op::stop_game = 1;
const int op::change_sittings = 2;
const int op::change_admin = 3;
const int op::update_code_and_data = 4;

;; ===== FIFT =====
tuple get_prev_block() asm "PREVKEYBLOCK";
(cell, (cell, int)) ~udict_add_get_ref?(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTUADDGETREF" "NULLSWAPIF";
(cell, int) udict_replace_ref?(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTUREPLACEREF";
(cell, (int, cell, int)) ~udict_delete_get_min_ref?(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMINREF" "NULLSWAPIFNOT2";


() load_data() impure inline {
    slice ds = get_data().begin_parse(); ;; Bits = 523. Refs = 1.
    storage::admin_address = ds~load_msg_addr();
    storage::public_key = ds~load_uint(256);

    slice ds2 = ds~load_ref().begin_parse();  ;; Bits = 815. Refs = 2.
    storage::commission_game_admin = ds2~load_uint(16);
    storage::commission_game_runners = ds2~load_uint(16);
    storage::min_bet = ds2~load_coins();
    storage::max_bet = ds2~load_coins();
    storage::max_participates = ds2~load_uint(8);
    storage::participates_number = ds2~load_uint(8);
    storage::game_time = ds2~load_uint(32);
    storage::game_start_time = ds2~load_uint(32);
    storage::game_round = ds2~load_uint(32);
    storage::stop_game_on_round = ds2~load_uint(32);
    storage::jackpot = ds2~load_coins();
    storage::last_game_winner_address = ds2~load_msg_addr();
    storage::list_participates = ds2~load_dict();
    storage::last_game_list_participates = ds2~load_dict();

    ds2.end_parse();
    ds.end_parse();
}


() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(storage::admin_address)
            .store_uint(storage::public_key, 256)
            .store_ref( 
                begin_cell()
                    .store_uint(storage::commission_game_admin,16)
                    .store_uint(storage::commission_game_runners,16)
                    .store_coins(storage::min_bet)
                    .store_coins(storage::max_bet)
                    .store_uint(storage::max_participates, 8)
                    .store_uint(storage::participates_number, 8)
                    .store_uint(storage::game_time, 32)
                    .store_uint(storage::game_start_time, 32)
                    .store_uint(storage::game_round, 32) ;; –æ—Çc—á–µ—Ç —Å 1 
                    .store_uint(storage::stop_game_on_round, 32) ;; 0
                    .store_coins(storage::jackpot)
                    .store_slice(storage::last_game_winner_address)
                    .store_dict(storage::list_participates)
                    .store_dict(storage::last_game_list_participates)
                .end_cell())
        .end_cell()
    );
}

() custom_randomize() impure inline {
    int prev_root_hash = 0;
    try {
        tuple prev_block = get_prev_block(); ;; (int wc, int shard, int seqno, int root_hash, int file_hash)
        prev_root_hash = prev_block.at(3);
    } catch (x, n) {
        prev_root_hash = 1;
    }

    randomize(prev_root_hash);
}

() send_message_with_sms(slice to, int amount, slice msg, int mode) impure inline {

    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(msg)
    .end_cell();

    send_raw_message(msg, mode);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    
    load_data();

    int op = 0;

    if (in_msg_body.slice_empty?() == false) {
        op = in_msg_body~load_uint(32); ;; op-code
    }

    if (op == 0) { ;; –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞–≤–∫—É –∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (storage::game_round == storage::stop_game_on_round) {
            send_message_with_sms(sender_address, 0, "Game paused üî¥", 64 + 2);
        }
        if ((storage::min_bet > msg_value) | (storage::max_bet < msg_value)) {
            send_message_with_sms(sender_address, 0, "Too little or too much TON ‚ùå", 64 + 2);
        }
        if (storage::participates_number >= storage::max_participates) {
            send_message_with_sms(sender_address, 0, "Too many players üë•", 64 + 2);
        }
        if (storage::game_start_time > now()) {
            send_message_with_sms(sender_address, 0, "Game starting soon ‚è≥", 64 + 2);
        }

        var (_, key_addr) = parse_std_addr(sender_address);

        var (value, found) = storage::list_participates~udict_add_get_ref?(256, key_addr, begin_cell().store_coins(msg_value).store_slice(sender_address).end_cell());

        if ( ~ found) {
            slice payload = value.begin_parse();
            int new_bet = payload~load_coins() + msg_value;
            storage::list_participates.udict_replace_ref?(256, key_addr, begin_cell().store_coins(new_bet).store_slice(sender_address).end_cell());
        } else {
            storage::participates_number += 1; 
        }

        storage::jackpot += msg_value;
        save_data();
        return ();
    }

    ;; admin part

    throw_unless(error::not_admin, equal_slices_bits(sender_address, storage::admin_address));

    if (op == op::stop_game) { ;; stop game
        storage::stop_game_on_round = in_msg_body~load_uint(32);
        save_data();
        return ();
    }

    if (op == op::change_sittings) { ;; change basic sittings 
        storage::game_time = in_msg_body~load_uint(16);
        storage::min_bet = in_msg_body~load_coins();
        storage::max_bet = in_msg_body~load_coins();
        storage::max_participates = in_msg_body~load_uint(8);
        storage::commission_game_admin = in_msg_body~load_uint(16);
        storage::commission_game_runners = in_msg_body~load_uint(16);
        storage::game_start_time = in_msg_body~load_uint(32);
        save_data();
        return ();
    }

    if (op == op::change_admin) { ;; change admin
        storage::admin_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == op::update_code_and_data) { ;; update code and data
        (cell new_data, cell new_code) = (in_msg_body~load_ref(), in_msg_body~load_ref());
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    throw(0xffff);
}


() recv_external(slice in_msg_body) impure { ;; finish and start new game
    cell msg_inner = in_msg_body~load_ref();
    slice signature = in_msg_body~load_bits(512);
    in_msg_body.end_parse();
    int msg_inner_hash = msg_inner.cell_hash();

    load_data();

    throw_unless(error::invalid_signature, check_signature(msg_inner_hash, signature, storage::public_key));

    slice msg_inner_slice = msg_inner.begin_parse();  
    int game_number = msg_inner_slice~load_uint(32);

    throw_unless(error::invalid_signature, storage::game_round == game_number);
    throw_if(error::wrong_round, storage::stop_game_on_round == game_number);
    throw_unless(error::game_is_not_over_yet, (storage::game_start_time + storage::game_time) <= now());

    accept_message();
    
    if (storage::participates_number == 0) { ;; –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä

        storage::list_participates = new_dict();
        storage::last_game_list_participates = storage::list_participates;
        storage::jackpot = 0;
        storage::participates_number = 0;
        storage::game_round += 1;
        storage::game_start_time = now();
        storage::last_game_winner_address = address_none();
        save_data();
        return ();

    } elseif (storage::participates_number == 1) { ;; –≤–æ–∑—Ä–∞—â–∞–µ–º —Å—Ç—Ä–µ–¥—Å—Ç–≤–∞

        var (_, value, _) = storage::list_participates~udict_delete_get_min_ref?(256);
        slice payload = value.begin_parse();
        payload~load_coins();
        slice participate_address = payload~load_msg_addr();
        raw_reserve(storage_commission, 0); ;; 0.05 ton 
        send_message_with_sms(participate_address, 0, "Need more players üö∂", 128 + 2);

        storage::list_participates = new_dict();
        storage::last_game_list_participates = storage::list_participates;
        storage::jackpot = 0;
        storage::participates_number = 0;
        storage::game_round += 1;
        storage::game_start_time = now();
        storage::last_game_winner_address = address_none();
        save_data();
        return ();

    } else { ;; –∏–≥—Ä–∞

        custom_randomize();
        randomize_lt();
        int r = rand(storage::jackpot);

        int flag = 0;
        int sum_bet = 0;

        do {
            var (_, value, _) = storage::list_participates~udict_delete_get_min_ref?(256);
            slice payload = value.begin_parse();
            sum_bet += payload~load_coins();
            if (r < sum_bet) {
                storage::last_game_winner_address = payload~load_msg_addr();
                flag = -1;
            }
        } until (flag == -1);

        ;; —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å runner
        ;; –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
        ;; —Ñ–∏–Ω–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é 

        if (in_msg_body.slice_empty?() == false) {
            slice game_runner = msg_inner_slice~load_msg_addr(); ;; —Ç–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º 
            int commission_runner = muldiv(storage::jackpot, storage::commission_game_runners, commission_divider); ;; –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É 3.2% = 320
            storage::jackpot -= commission_runner;
            send_message_with_sms(game_runner, commission_runner, "Runner fee üèÉ", 2 + 1);
        }

        int commission_admin = muldiv(storage::jackpot, storage::commission_game_admin, commission_divider);
        send_message_with_sms(storage::admin_address, commission_admin, "Admin fee üí∞", 2 + 1);

        raw_reserve(storage_commission, 0); ;; 0.05 ton 
        send_message_with_sms(storage::last_game_winner_address, 0, "You win üéâ", 128 + 2);

        storage::last_game_list_participates = storage::list_participates;
        storage::list_participates = new_dict();
        storage::jackpot = 0;
        storage::participates_number = 0;
        storage::game_round += 1;
        storage::game_start_time = now();
        save_data();
        return ();
    }
}

(slice, int, int, int, int, int, int, int, int, int, int, int, int, slice, cell, cell) get_storage_data() method_id {
    load_data();
    return (
        storage::admin_address,
        storage::public_key,
        storage::commission_game_admin,
        storage::commission_game_runners,
        storage::min_bet,
        storage::max_bet,
        storage::max_participates,
        storage::participates_number,
        storage::game_time,
        storage::game_start_time,
        storage::game_round,
        storage::stop_game_on_round,
        storage::jackpot,
        storage::last_game_winner_address,
        storage::list_participates,
        storage::last_game_list_participates
    );
}